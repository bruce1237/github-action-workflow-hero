name: run clair-scan
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - ".github/**"
    
  workflow_dispatch:
   
jobs:
  clair-scan:
   runs-on: ubuntu-latest
   steps:
      - name: docker login
        uses: bruce1237/github-workflow-center/.github/actions/docker-login@main
        with:
          github_token: ${{ github.TOKEN }}

      - name: try-1
        run: |
          #!/bin/bash
          set -ueo pipefail

          cd "$(dirname "$0")"

          log_error() { echo -e "\033[0m\033[1;91m${*}\033[0m"; }
          log_success() { echo -e "\033[0m\033[1;92m${*}\033[0m"; }

          image=ghcr.io/${{ github.repository }}:${{ github.ref_name }}


          if [[ -z "${image:-}" ]] || ! [[ "${image:-}" =~ : ]]; then
            log_error "must specify image:version to scan"
            exit 1
          fi

          function scanner_docker_build() {
            echo $'
              FROM amazonlinux:2
              RUN curl -L \
                  https://github.com/arminc/clair-scanner/releases/download/v12/clair-scanner_linux_amd64 \
                  -o clair-scanner && \
                  chmod +x ./clair-scanner
            ' | docker build -t clair-scanner -
          }

          if ! scanner_docker_build >/dev/null 2>&1; then
            scanner_docker_build
          fi

          function scanner_docker_compose() {
            echo $'
              version: "3"
              services:
                postgres:
                  image: arminc/clair-db:latest
                  networks:
                    - clair-local
                  restart: always
                clair:
                  image: arminc/clair-local-scan:latest
                  networks:
                    - clair-local
                  restart: always
              networks:
                clair-local:
                  driver: bridge
            ' | docker-compose -f - "${@}"
          }

          if ! scanner_docker_compose pull >/dev/null 2>&1; then
            scanner_docker_compose pull
          fi

          if ! scanner_docker_compose up -d >/dev/null 2>&1; then
            scanner_docker_compose up -d
          fi

          report_file=$(echo "${image:?}.json" | sed  's/\W/-/g')

          trap "scanner_docker_compose down > /dev/null 2>&1" int exit

          reports=$(mktemp -d)

          function scan() {
            local image="${1:?}"
            docker run \
              -ti \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -v "${reports:?}:/reports" \
              --rm \
              --network="$(basename "$(pwd)")"_clair-local \
              clair-scanner \
              bash -c """
              while ! curl -q http://clair:6060 > /dev/null 2>&1; do
                sleep 1
              done
                ./clair-scanner --ip \${HOSTNAME:?} -r /reports/${report_file:?} --clair http://clair:6060 \"${image:?}\"
              """
          }

          if scan "${image:?}"; then
            log_success "âœ¨ ${image:?} contains no known vulnerabilities. âœ¨"
          else
            log_error "ðŸ˜± ${image:?} contains vulnerabilities, details saved to report.txt . ðŸ˜±"
            exit 0
          fi

          cat report.txt
      
      - name: pull the image
        run: docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}

      - name: checkout clair
        uses: actions/checkout@v3
        with:
          repository: arminc/clair-scanner
      
      - name: copy file
        run: |
          cp ./example-run.sh clair-scanner
          chmod +x clair-scanner
      
      - name: check files
        run: |
          ls -lah
          ls -lah /

      - name: check images
        run: |
          docker images


      - name: run scan
        run: |
          touch clair-whitelist.yml
          # ./clair-scanner -r report.json -l result.log -w clair-whitelist.yml ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ./clair-scanner ghcr.io/${{ github.repository }}:${{ github.ref_name }} >> report.json

      - name: check log file
        run: cat result.log
